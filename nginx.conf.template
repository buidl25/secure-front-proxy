worker_processes auto;

events {
  worker_connections 1024;
}

http {
  # Основные настройки
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  sendfile      on;
  tcp_nopush    on;
  tcp_nodelay   on;
  keepalive_timeout  65;
  types_hash_max_size 2048;
  
  # Определяем переменные для динамического проксирования
  map $use_http_backend $backend_protocol {
    default "https";
    "true" "http";
  }
  
  # Используем переменные из docker-entrypoint.sh для заголовка Host
  # Это позволит правильно проксировать запросы
  map $http_host $backend_host {
    default "${CLEAN_HOST}";
  }
  
  # Экстремальные значения для буферов заголовков - для решения проблемы с 431
  large_client_header_buffers 32 1024k;  # Максимально увеличиваем количество и размер буферов
  client_header_buffer_size 128k;       # Увеличиваем размер буфера заголовков
  client_max_body_size 100M;           # Максимальный размер тела запроса
  client_body_buffer_size 512k;       # Размер буфера для тела запроса
  client_header_timeout 120s;          # Увеличиваем таймаут для заголовков
  server_tokens off;                  # Скрываем версию Nginx
  ignore_invalid_headers off;          # Разрешаем нестандартные заголовки
  underscores_in_headers on;           # Разрешаем подчеркивания в заголовках
  
  # Настройки логирования
  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';
  access_log /var/log/nginx/access.log main;
  error_log /var/log/nginx/error.log warn;
  
  # Настройки DNS-резолвера для правильного разрешения имен хостов
  resolver 1.1.1.1 8.8.8.8 valid=30s ipv6=off;
  resolver_timeout 5s;

  # Основной сервер
  server {
    listen ${PORT} default_server;
    server_name _;
    
    # Настройки для обработки ошибок
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
      root /usr/share/nginx/html;
      internal;
    }
    
    # Страница с информацией о проблемах с DNS
    location = /dns-error.html {
      add_header Content-Type text/html;
      return 200 '<html><head><title>DNS Resolution Error</title></head><body><h1>DNS Resolution Error</h1><p>The server is unable to resolve the hostname for the backend service. This may be due to using an internal Railway domain that is not accessible.</p><p>Please check your PROXY_PASS environment variable and consider using a public URL instead.</p><p>Current PROXY_PASS: ${PROXY_PASS}</p></body></html>';
    }
    
    # Страница с информацией о проблемах с SSL
    location = /ssl-error.html {
      add_header Content-Type text/html;
      return 200 '<html><head><title>SSL Connection Error</title></head><body><h1>SSL Connection Error</h1><p>The server encountered an SSL error when connecting to the backend service.</p><p>Possible solutions:</p><ul><li>Set USE_HTTP_BACKEND=true to use HTTP instead of HTTPS</li><li>Check if the backend service supports HTTPS</li><li>Check if the SSL certificate of the backend service is valid</li></ul><p>Current PROXY_PASS: ${PROXY_PASS}</p></body></html>';
    }
    
    # Страница с информацией о слишком больших заголовках
    location = /header-error.html {
      add_header Content-Type text/html;
      return 200 '<html><head><title>Request Header Too Large</title></head><body><h1>Request Header Too Large</h1><p>The server cannot process the request because the header fields are too large.</p><p>Possible solutions:</p><ul><li>Use a direct connection without authentication: <a href="/direct/">/direct/</a></li><li>Reduce the size of cookies or other headers</li><li>Try using a different browser or clearing cookies</li><li>Try using a terminal command like curl instead of a browser</li></ul></body></html>';
    }
    
    # Перенаправление на страницы с информацией об ошибках
    error_page 502 /dns-error.html;
    error_page 496 497 /ssl-error.html;
    error_page 431 400 /header-error.html;
    
    # Страница статуса для отладки
    location /nginx-status {
      auth_basic "Restricted Area";
      auth_basic_user_file /etc/nginx/.htpasswd;
      stub_status on;
      access_log off;
    }
    
    # Страница проверки здоровья - без аутентификации
    location /health {
      access_log off;
      return 200 "OK";
    }
    
    # Публичный эндпоинт для проверки доступности без аутентификации
    location /public-access {
      access_log off;
      add_header Content-Type text/html;
      return 200 '<html><head><title>Public Access</title></head><body><h1>Public Access Endpoint</h1><p>This endpoint is accessible without authentication.</p><p>Current time: $time_local</p><p>Server: $hostname</p></body></html>';
    }
    
    # Прямой доступ к целевому сервису без аутентификации
    location /direct/ {
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      # Ограничиваем размер X-Forwarded-For, используя только последний IP
      set $x_forwarded_for $remote_addr;
      proxy_set_header X-Forwarded-For $x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Nginx-Proxy true;
      
      # Настройки WebSocket
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      
      # Таймауты и буферы - оптимизированные значения
      proxy_connect_timeout 60s;
      proxy_send_timeout 60s;
      proxy_read_timeout 60s;
      proxy_buffers 8 16k;
      proxy_buffer_size 32k;
      proxy_busy_buffers_size 64k;
      proxy_temp_file_write_size 64k;
      
      # Максимальные размеры буфера для заголовков при проксировании
      proxy_headers_hash_max_size 512;
      proxy_headers_hash_bucket_size 128;
      
      # Настройки для более эффективной обработки запросов
      proxy_request_buffering on;
      proxy_ignore_client_abort off;
      
      # Настройки SSL для подключения к бэкенду
      proxy_ssl_server_name on;
      proxy_ssl_protocols TLSv1.2 TLSv1.3;
      proxy_ssl_ciphers HIGH:!aNULL:!MD5;
      proxy_ssl_verify off; # Отключаем проверку SSL-сертификата для совместимости
      proxy_ssl_session_reuse on;
      
      # Удаляем /direct/ из URL и перенаправляем на upstream серверы
      rewrite ^/direct/(.*) /$1 break;
      
      # Динамически формируем URL для проксирования
      # Используем чистый хост без протокола и пути
      proxy_pass $backend_protocol://${CLEAN_HOST};
      
      # Настройки повторных попыток и таймаутов
      proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
      proxy_next_upstream_tries 5;
      proxy_next_upstream_timeout 30s;
      
      # Обработка ошибок
      proxy_intercept_errors on;
    }
    
    # Основной прокси-обработчик
    location / {
      auth_basic "Restricted Area";
      auth_basic_user_file /etc/nginx/.htpasswd;
      
      # Заголовки прокси - используем извлеченный хост из PROXY_PASS
      proxy_set_header Host ${CLEAN_HOST};
      proxy_set_header X-Real-IP $remote_addr;
      # Ограничиваем размер X-Forwarded-For, используя только последний IP
      set $x_forwarded_for $remote_addr;
      proxy_set_header X-Forwarded-For $x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Nginx-Proxy true;
      
      # Настройки WebSocket
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      
      # Таймауты и буферы - оптимизированные значения
      proxy_connect_timeout 60s;
      proxy_send_timeout 60s;
      proxy_read_timeout 60s;
      proxy_buffers 8 16k;
      proxy_buffer_size 32k;
      proxy_busy_buffers_size 64k;
      proxy_temp_file_write_size 64k;
      
      # Максимальные размеры буфера для заголовков при проксировании
      proxy_headers_hash_max_size 512;
      proxy_headers_hash_bucket_size 128;
      
      # Настройки для более эффективной обработки запросов
      proxy_request_buffering on;
      proxy_ignore_client_abort off;
      
      # Настройки SSL для подключения к бэкенду
      proxy_ssl_server_name on;
      proxy_ssl_protocols TLSv1.2 TLSv1.3;
      proxy_ssl_ciphers HIGH:!aNULL:!MD5;
      proxy_ssl_verify off; # Отключаем проверку SSL-сертификата для совместимости
      proxy_ssl_session_reuse on;
      
      # Динамически формируем URL для проксирования
      # Используем чистый хост без протокола и пути
      proxy_pass $backend_protocol://${CLEAN_HOST};
      
      # Настройки повторных попыток и таймаутов
      proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
      proxy_next_upstream_tries 5;
      proxy_next_upstream_timeout 30s;
      
      # Обработка ошибок
      proxy_intercept_errors on;
    }
  }
}
